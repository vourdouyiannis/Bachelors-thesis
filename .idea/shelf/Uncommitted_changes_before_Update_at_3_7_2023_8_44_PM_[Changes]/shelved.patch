Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport json\r\nimport praw\r\n\r\n# Create an instance\r\nreddit = praw.Reddit(client_id=\"uvhJFnUWQzUbuWpS2OIDWQ\", client_secret=\"PTog9qkGIPcLH1rzXlyWmrAVHGVc8g\", user_agent=\"vourdouyiannis\")\r\n\r\n# For subreddit COVID19\r\n# Search the keyword \"vaccine\"\r\n# Get the top 5 posts\r\nsubreddit = reddit.subreddit(\"COVID19\").search(\"vaccine\", sort=\"top\", limit=5)\r\n\r\n# Process the posts data\r\nposts = []\r\nfor post in subreddit:\r\n    post_data = {\r\n        'id': post.id,\r\n        'title': post.title,\r\n        'author': post.author.name,\r\n        'content': post.selftext,\r\n    }\r\n    posts.append(post_data)\r\n\r\n# Save the posts data to a JSON file\r\nwith open('posts.json', 'w') as f:\r\n    json.dump(posts, f)\r\n\r\n# Get the first submission (The one with the most upvotes too)\r\nsubmission = reddit.submission(id=posts[0]['id'])\r\n\r\n# Sort the comments into the tree we want\r\ntree = []\r\ncomment_stack = submission.comments[:]\r\nsubmission.comments.replace_more(limit=None)\r\nwhile comment_stack:\r\n        comment = comment_stack.pop(0)\r\n        tree.append(comment)\r\n        comment_stack[0:0] = comment.replies\r\n\r\n# Process the tree's data\r\ncomments = []\r\nfor comment in tree:\r\n    print(comment.body)  # TODO remove later\r\n    print(\"################################\")  # TODO remove later\r\n    if comment.author is None:\r\n        continue\r\n    else:\r\n        comment_data = {\r\n            'id': comment.id,\r\n            'author': comment.author.name,\r\n            'content': comment.body,\r\n        }\r\n        comments.append(comment_data)\r\n\r\n# Store the tree into a JSON file\r\nwith open('comments.json', 'w') as f:\r\n    json.dump(comments, f)\r\n\r\n# Define that this is the end of the comments.\r\n# From there we can store comments from different post\r\nwith open('comments.json', 'r+') as f:\r\n    comments = json.load(f)\r\n    comments.append({'isLast': True})\r\n    f.seek(0)\r\n    json.dump(comments, f)\r\n
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	
+++ b/test.py	
@@ -25,41 +25,50 @@
 with open('posts.json', 'w') as f:
     json.dump(posts, f)
 
-# Get the first submission (The one with the most upvotes too)
-submission = reddit.submission(id=posts[0]['id'])
+# Load the posts to pick the post we want to make a tree
+with open('posts.json', 'r') as f:
+    posts_dict = json.load(f)
 
-# Sort the comments into the tree we want
-tree = []
-comment_stack = submission.comments[:]
-submission.comments.replace_more(limit=None)
-while comment_stack:
-        comment = comment_stack.pop(0)
-        tree.append(comment)
-        comment_stack[0:0] = comment.replies
+print(posts_dict) # TODO remove later
+
+def make_tree(submission):
+    # Sort the comments into the tree we want
+    tree = []
+    comment_stack = submission.comments[:]
+    submission.comments.replace_more(limit=None)
+    while comment_stack:
+            comment = comment_stack.pop(0)
+            tree.append(comment)
+            comment_stack[0:0] = comment.replies
 
-# Process the tree's data
-comments = []
-for comment in tree:
-    print(comment.body)  # TODO remove later
-    print("################################")  # TODO remove later
-    if comment.author is None:
-        continue
-    else:
-        comment_data = {
-            'id': comment.id,
-            'author': comment.author.name,
-            'content': comment.body,
-        }
-        comments.append(comment_data)
+    # Process the tree's data
+    comments = []
+    for comment in tree:
+        print(comment.body)  # TODO remove later
+        print("################################")  # TODO remove later
+        if comment.author is None:
+            continue
+        else:
+            comment_data = {
+                'id': comment.id,
+                'author': comment.author.name,
+                'content': comment.body,
+            }
+            comments.append(comment_data)
 
-# Store the tree into a JSON file
-with open('comments.json', 'w') as f:
-    json.dump(comments, f)
+    # Store the tree into a JSON file
+    with open('comments.json', 'w') as f:
+        json.dump(comments, f)
 
-# Define that this is the end of the comments.
-# From there we can store comments from different post
-with open('comments.json', 'r+') as f:
-    comments = json.load(f)
-    comments.append({'isLast': True})
-    f.seek(0)
-    json.dump(comments, f)
+    # Define that this is the end of the comments.
+    # From there we can store comments from different post
+    with open('comments.json', 'r+') as f:
+        comments = json.load(f)
+        comments.append({'isLast': True})
+        f.seek(0)
+        json.dump(comments, f)
+
+for i in range(1):
+    # Get the first submission (The one with the most upvotes too)
+    submission = reddit.submission(id=posts_dict[i]['id'])
+    make_tree(submission)
